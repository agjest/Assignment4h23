---
title: "Assignment4h23"
format: html
editor: visual
language: nb.yaml
---

```{r}
#| label: setup
#| output: false
#| message: false
#| echo: false
library(tidyverse)
library(readxl)
library(restatapi)
library(DescTools)
library(ggrepel)
library(flextable)
library(modelr)
library(plm)
library(broom)
library(sandwich)
library(dplyr)
```

```{r}
# xml skal ha mer detaljert info
# toc_xml <- get_eurostat_toc()
# tekstversjonen har trolig nok info for vårt formål
toc_txt <- get_eurostat_toc(mode = "txt")
```

```{r}
gdp_tabs <- toc_txt |>
   # Regex AND external to regex
      filter(
        str_detect(
string = title,
# For å matche både små og store bokstaver 
pattern = '[Gg][Dd][Pp]'
# AND vha. &
) &
        str_detect(
          string = title,
          # For å matche både små og store bokstaver og
          # space eller ikke før 3
          pattern = '[Nn][Uu][Tt][Ss]\\s*3'
          )
) |>
     select(title, code)
```

```{r}
gdp_tabs |>
     select(title, code) |>
     flextable()  |>
     width(1, width = 3.5) |>
     width(2, width = 1.5)
```

```{r}
# description nama_10r_3gdp
   dsd_gdp <- get_eurostat_dsd("nama_10r_3gdp")
  dsd_gdp |>
  head(n = 15) |>
  flextable()  |>
  width(1, width = 1) |>
  width(2, width = 1) |>
  width(3, width = 3.5)
```

```{r}
# Gross domestic product (GDP) at current market prices by NUTS 3 regions
  # id: nama_10r_3gdp
  nama_10r_3gdp <- get_eurostat_data(
    id = "nama_10r_3gdp",
    filters = list(
      geo = c("AT", "DE", "DK", "FR", "EL", "ES",
              "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
      nuts_level = "3",
      unit = "MIO_PPS_EU27_2020"
    ),
    exact_match = FALSE,
    date_filter = 2000:2020,
    stringsAsFactors = FALSE
    ) |>
    mutate(
      gdp = 1000000 * values
    ) |>
    select(-c(unit, values)) |>
    # Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2, NUTS1 og NUTSc
     filter(str_length(geo) == 5)
```

## Oppgave 1

Vi vil i hovedsak bruke befolkningstabellen som har teksten: «Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions», men siden denne synes å ha manglende data for noen regioner vil vi supplere med data fra tabellen med teksten «Population on 1 January by broad age group, sex and NUTS 3 region».

**Funnet ved søk:**

«Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions» = nama_10r_3popgdp

«Population on 1 January by broad age group, sex and NUTS 3 region» = demo_r_pjanaggr3

## Oppgave 2

```{r}
# description nama_10r_3popgdp
   dsd_gdp <- get_eurostat_dsd("nama_10r_3popgdp")
  dsd_gdp |>
  head(n = 15) |>
  flextable()  |>
  width(1, width = 1) |>
  width(2, width = 1) |>
  width(3, width = 3.5)
```

```{r}
  # id: nama_10r_3popgdp
  nama_10r_3popgdp <- get_eurostat_data(
    id = "nama_10r_3popgdp",
    filters = list(
      geo = c("AT", "DE", "DK", "FR", "EL", "ES",
              "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
      nuts_level = "3",
      unit = "THS"
    ),
    exact_match = FALSE,
    date_filter = 2000:2020,
    stringsAsFactors = FALSE
    ) |>
    mutate(
      pop.x = 1000 * values
    ) |>
    select(-c(unit, values)) |>
    # Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2, NUTS1 og NUTSc
     filter(str_length(geo) == 5)
```

## Oppgave 3

```{r}
  # id: demo_r_pjanaggr3
  demo_r_pjanaggr3 <- get_eurostat_data(
    id = "demo_r_pjanaggr3",
    filters = list(
      geo = c("AT", "DE", "DK", "FR", "EL", "ES",
              "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
      nuts_level = "3",
      unit = "NR", sex = "T", age = "TOTAL"
    ),
    exact_match = FALSE,
    date_filter = 2000:2020,
    stringsAsFactors = FALSE
    ) |>
    select(-c(unit, age, sex)) |> select(geo, time, pop.y = values) |> 
    # Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2, NUTS1 og NUTSc
     filter(str_length(geo) == 5)
```

## Oppgave 4

```{r}
nuts3_missing_in_demo_r_pjanaggr3 <- setdiff(
  nama_10r_3popgdp$geo,
  demo_r_pjanaggr3$geo
)

# Vis resultatet
print(nuts3_missing_in_demo_r_pjanaggr3)
```

## Oppgave 5

```{r}
# Identifiser NUTS3-soner som mangler i nama_10r_3gdp
nuts3_missing_in_nama_10r_3gdp <- setdiff(
  demo_r_pjanaggr3$geo,
  nama_10r_3popgdp$geo
)

# Vis resultatet
print(nuts3_missing_in_nama_10r_3gdp)
```

## Oppgave 6

```{r}
# Utfører en full_join
full_pop_nuts3 <- full_join(demo_r_pjanaggr3, nama_10r_3popgdp, by = c("geo", "time"))

# Vis de første radene av det kombinerte datasettet
head(full_pop_nuts3)
```

## Oppgave 7

```{r}
# Identifiser NUTS3-soner som mangler i GDP-tabellen
nuts3_missing_in_gdp <- setdiff(
  full_pop_nuts3$geo,
  nama_10r_3popgdp$geo
)

# Vis resultatet
print(nuts3_missing_in_gdp)
```

## Oppgave 8

```{r}
# Identifiserer NUTS3-soner som mangler i full_pop_nuts3
nuts3_missing_in_full_pop_nuts3 <- setdiff(
  nama_10r_3gdp$geo,
  full_pop_nuts3$geo
)

# Vis resultatet
print(nuts3_missing_in_full_pop_nuts3)
```

## Oppgave 9

```{r}
full_pop_nuts3 |>
     filter(geo %in% c("NO053", "NO060", "NO061")) |>
     filter(time %in% 2014:2020) |>
     arrange(time, geo)
```

## Oppgave 10

```{r}
 full_pop_nuts3 <- full_pop_nuts3 |>
     mutate(
       pop = ifelse(
         test = is.na(pop.x) == TRUE,
         yes = pop.y,
         no = pop.x
         )
     ) |>
     select(-pop.x, -pop.y)
```

## Oppgave 11

```{r}
full_pop_nuts3 <- full_pop_nuts3 %>%
    mutate(pop = ifelse(pop == 0, NA, pop))
```

## Oppgave 12

```{r}
eu_data <- left_join(nama_10r_3gdp, full_pop_nuts3, by = c("geo", "time"))
```

```{r}
dim(eu_data)
```

**Dette er feil tall! Skal bli slik:**

**21159 4**

```{r}
eu_data <- eu_data |>
    mutate(
      country = str_sub(geo, start = 1L, end = 2L)
    )
```

```{r}
eu_data |>
    distinct(geo, .keep_all = TRUE) |>
    group_by(country) |>
    summarise(Antall = n(), .groups = "drop")
```

```{r}
eu_data |>
   summary()
```

```{r}
eu_data <- eu_data |>
    select(country, NUTS3 = geo, year = time, gdp, pop)
  # Rydder opp
  # Sletter alle objekt utenom eu_data
  # don't use if you don't mean it
  rm(list = setdiff(ls(), "eu_data"))
```

## Oppgave 13

```{r}
# Beregner GDP per capita
eu_data <- eu_data %>%
  mutate(gdp_per_capita = round(gdp / pop, 2))
```

```{r}
  eu_data |>
    select(gdp_per_capita) |>
    summary()
```

## Oppgave 14

```{r}
# Legger til variabelen country_name basert på verdier i geo
eu_data <- eu_data %>%
  mutate(
    country_name = case_when(
      country == "AT" ~ "Østerrike",
      country == "DE" ~ "Tyskland",
      country == "DK" ~ "Danmark",
      country == "FR" ~ "Frankrike",
      country == "EL" ~ "Hellas",
      country == "ES" ~ "Spania",
      country == "IT" ~ "Italia",
      country == "NL" ~ "Nederland",
      country == "BE" ~ "Belgia",
      country == "IE" ~ "Irland",
      country == "PL" ~ "Polen",
      country == "PT" ~ "Portugal",
      country == "NO" ~ "Norge",
      country == "SE" ~ "Sverige",
      country == "FI" ~ "Finland",
      country == "CH" ~ "Sveits",
      TRUE ~ as.character(country)  # Default: Behold country som country_name hvis ingen betingelser matcher
    )
  )
```

## Oppgave 15

```{r}
# Lager NUTS2, NUTS1, og NUTSc
eu_data <- eu_data %>%
  mutate(
    NUTS2 = str_sub(NUTS3, start = 1, end = 4),
    NUTS1 = str_sub(NUTS3, start = 1, end = 3),
    NUTSc = str_sub(NUTS3, start = 1, end = 2)
  ) %>%
  # Velger ønsket rekkefølge av variabler
  select(country_name, country, year, NUTS3, NUTS2, NUTS1, NUTSc, gdp, pop, gdp_per_capita)
```

## Oppgave 16

```{r}
gini_NUTS2 <- eu_data %>%
  group_by(NUTS2, country_name, country, year) %>%
  summarise(
    gini_nuts2 = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts3 = n(),
    .groups = "drop"
  ) %>%
  select(country_name, country, NUTS2, year, pop, gdp, gdp_per_capita, num_nuts3, gini_nuts2)
```

```{r}
gini_NUTS2 |>
     summary() |>
     print(width = 80)
```

```{r}
gini_NUTS2 |>
    select(-country_name) |>
    filter(gini_nuts2 < 0.001)
```

## Oppgave 17

```{r}
gini_NUTS1 <- eu_data %>%
  group_by(NUTS1, country_name, country, year) %>%
  summarise(
    gini_nuts1 = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts2 = n_distinct(NUTS2),
    .groups = "drop"
  ) %>%
  select(country_name, country, NUTS1, year, pop, gdp, gdp_per_capita, num_nuts2, gini_nuts1)
```

```{r}
gini_NUTS1 |>
  summary() |> 
    print(width = 80)
```

## Oppgave 18

```{r}
gini_NUTSc <- eu_data %>%
  group_by(NUTSc, country_name, country, year) %>%
  summarise(
    gini_nutsc = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts1 = n_distinct(NUTS1),
    .groups = "drop"
  ) %>%
  select(country_name, country, NUTSc, year, pop, gdp, gdp_per_capita, num_nuts1, gini_nutsc)
```

```{r}
gini_NUTSc |>
    summary() |>
    print(width = 80)
```

## Oppgave 19

```{r}
gini_NUTS2_nest <- gini_NUTS2 |>
     group_by(country_name, country) |>
     nest(.key = "NUTS2_data") |>
     ungroup()
```

## Oppgave 20

```{r}
gini_NUTS1_nest <- gini_NUTS1 %>%
  group_by(country_name, country) %>%
  nest(.key = "NUTS1_data") %>%
  ungroup()
```

## Oppgave 21

```{r}
gini_NUTSc_nest <- gini_NUTSc %>%
  group_by(country_name, country) %>%
  nest(.key = "NUTSc_data") %>%
  ungroup()
```

## Oppgave 22

```{r}
# Neste dataene på NUTS3-nivå
eu_data_nestet <- eu_data %>%
  group_by(NUTS3, country_name, country, year) %>%
  nest(.key = "NUTS3_data") %>%
  ungroup()

# Left join med gini-data på NUTS2-nivå
eu_data_nestet <- left_join(eu_data_nestet, gini_NUTS2_nest, by = c("country_name", "country"))

# Left join med gini-data på NUTS1-nivå
eu_data_nestet <- left_join(eu_data_nestet, gini_NUTS1_nest, by = c("country_name", "country"))

# Left join med gini-data på NUTSc-nivå
eu_data_nestet <- left_join(eu_data_nestet, gini_NUTSc_nest, by = c("country_name", "country"))

# Fjerner gruppestrukturen
eu_data_nestet <- eu_data_nestet %>% ungroup()
```

```{r}
# don't run if you don't mean it.
rm(list = setdiff(ls(), c("eu_data", "eu_data_nested")))
```

## Oppgave 23

## Oppgave 24

## Oppgave 25

## Oppgave 26
