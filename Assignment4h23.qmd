---
title: "Assignment4h23"
format: html
editor: visual
language: nb.yaml
---

```{r}
#| label: setup
#| output: false
#| message: false
#| echo: false
library(tidyverse)
library(readxl)
library(restatapi)
library(DescTools)
library(ggrepel)
library(flextable)
library(modelr)
library(plm)
library(broom)
library(sandwich)
library(dplyr)
```

```{r}
# xml skal ha mer detaljert info
# toc_xml <- get_eurostat_toc()
# tekstversjonen har trolig nok info for vårt formål
toc_txt <- get_eurostat_toc(mode = "txt")
```

```{r}
gdp_tabs <- toc_txt |>
   # Regex AND external to regex
      filter(
        str_detect(
string = title,
# For å matche både små og store bokstaver 
pattern = '[Gg][Dd][Pp]'
# AND vha. &
) &
        str_detect(
          string = title,
          # For å matche både små og store bokstaver og
          # space eller ikke før 3
          pattern = '[Nn][Uu][Tt][Ss]\\s*3'
          )
) |>
     select(title, code)
```

```{r}
gdp_tabs |>
     select(title, code) |>
     flextable()  |>
     width(1, width = 3.5) |>
     width(2, width = 1.5)
```

```{r}
# description nama_10r_3gdp
   dsd_gdp <- get_eurostat_dsd("nama_10r_3gdp")
  dsd_gdp |>
  head(n = 15) |>
  flextable()  |>
  width(1, width = 1) |>
  width(2, width = 1) |>
  width(3, width = 3.5)
```

```{r}
# Gross domestic product (GDP) at current market prices by NUTS 3 regions
  # id: nama_10r_3gdp
  nama_10r_3gdp <- get_eurostat_data(
    id = "nama_10r_3gdp",
    filters = list(
      geo = c("AT", "DE", "DK", "FR", "EL", "ES",
              "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
      nuts_level = "3",
      unit = "MIO_PPS_EU27_2020"
    ),
    exact_match = FALSE,
    date_filter = 2000:2020,
    stringsAsFactors = FALSE
    ) |>
    mutate(
      gdp = 1000000 * values
    ) |>
    select(-c(unit, values)) |>
    # Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2, NUTS1 og NUTSc
     filter(str_length(geo) == 5)
```

## Oppgave 1

Vi vil i hovedsak bruke befolkningstabellen som har teksten: «Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions», men siden denne synes å ha manglende data for noen regioner vil vi supplere med data fra tabellen med teksten «Population on 1 January by broad age group, sex and NUTS 3 region».

**Funnet ved søk:**

«Average annual population to calculate regional GDP data (thousand persons) by NUTS 3 regions» = nama_10r_3popgdp

«Population on 1 January by broad age group, sex and NUTS 3 region» = demo_r_pjanaggr3

## Oppgave 2

```{r}
# description nama_10r_3popgdp
   dsd_gdp <- get_eurostat_dsd("nama_10r_3popgdp")
  dsd_gdp |>
  head(n = 15) |>
  flextable()  |>
  width(1, width = 1) |>
  width(2, width = 1) |>
  width(3, width = 3.5)
```

```{r}
  # id: nama_10r_3popgdp
  nama_10r_3popgdp <- get_eurostat_data(
    id = "nama_10r_3popgdp",
    filters = list(
      geo = c("AT", "DE", "DK", "FR", "EL", "ES",
              "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
      nuts_level = "3",
      unit = "THS"
    ),
    exact_match = FALSE,
    date_filter = 2000:2020,
    stringsAsFactors = FALSE
    ) |>
    mutate(
      pop.x = 1000 * values
    ) |>
    select(-c(unit, values)) |>
    # Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2, NUTS1 og NUTSc
     filter(str_length(geo) == 5)
```

## Oppgave 3

```{r}
  # id: demo_r_pjanaggr3
  demo_r_pjanaggr3 <- get_eurostat_data(
    id = "demo_r_pjanaggr3",
    filters = list(
      geo = c("AT", "DE", "DK", "FR", "EL", "ES",
              "IT", "NL", "BE", "IE", "PL", "PT", "NO", "SE", "FI", "CH"),
      nuts_level = "3",
      unit = "NR", sex = "T", age = "TOTAL"
    ),
    exact_match = FALSE,
    date_filter = 2000:2020,
    stringsAsFactors = FALSE
    ) |>
    select(-c(unit, age, sex)) |> select(geo, time, pop.y = values) |> 
    # Vil bare ha NUTS 3 nivå (5 karakterer). Vil aggregere selv til NUTS2, NUTS1 og NUTSc
     filter(str_length(geo) == 5)
```

## Oppgave 4

```{r}
nuts3_missing_in_demo_r_pjanaggr3 <- setdiff(
  nama_10r_3popgdp$geo,
  demo_r_pjanaggr3$geo
)

# Vis resultatet
print(nuts3_missing_in_demo_r_pjanaggr3)
```

## Oppgave 5

```{r}
# Identifiser NUTS3-soner som mangler i nama_10r_3gdp
nuts3_missing_in_nama_10r_3gdp <- setdiff(
  demo_r_pjanaggr3$geo,
  nama_10r_3popgdp$geo
)

# Vis resultatet
print(nuts3_missing_in_nama_10r_3gdp)
```

## Oppgave 6

```{r}
# Utfører en full_join
full_pop_nuts3 <- full_join(demo_r_pjanaggr3, nama_10r_3popgdp, by = c("geo", "time"))

# Vis de første radene av det kombinerte datasettet
head(full_pop_nuts3)
```

## Oppgave 7

```{r}
# Identifiser NUTS3-soner som mangler i GDP-tabellen
nuts3_missing_in_gdp <- setdiff(
  full_pop_nuts3$geo,
  nama_10r_3popgdp$geo
)

# Vis resultatet
print(nuts3_missing_in_gdp)
```

## Oppgave 8

```{r}
# Identifiserer NUTS3-soner som mangler i full_pop_nuts3
nuts3_missing_in_full_pop_nuts3 <- setdiff(
  nama_10r_3gdp$geo,
  full_pop_nuts3$geo
)

# Vis resultatet
print(nuts3_missing_in_full_pop_nuts3)
```

## Oppgave 9

```{r}
full_pop_nuts3 |>
     filter(geo %in% c("NO053", "NO060", "NO061")) |>
     filter(time %in% 2014:2020) |>
     arrange(time, geo)
```

```{r}
full_pop_nuts3 <- full_pop_nuts3 %>%
  filter(!str_detect(str_sub(geo, start = 3, end = 5), "ZZZ$"))
```

## Oppgave 10

```{r}
 full_pop_nuts3 <- full_pop_nuts3 |>
     mutate(
       pop = ifelse(
         test = is.na(pop.x) == TRUE,
         yes = pop.y,
         no = pop.x
         )
     ) |>
     select(-pop.x, -pop.y)
```

## Oppgave 11

```{r}
full_pop_nuts3 <- full_pop_nuts3 %>%
    mutate(pop = ifelse(pop == 0, NA, pop))
```

## Oppgave 12

```{r}
eu_data <- left_join(nama_10r_3gdp, full_pop_nuts3, by = c("geo", "time"))
```

```{r}
eu_data <- eu_data %>%
  filter(!str_detect(str_sub(geo, start = 3, end = 5), "ZZZ$"))
```

```{r}
dim(eu_data)
```

**Dette er feil tall! Skal bli slik:**

**21159 4**

```{r}
eu_data <- eu_data |>
    mutate(
      country = str_sub(geo, start = 1L, end = 2L)
    )
```

```{r}
eu_data |>
    distinct(geo, .keep_all = TRUE) |>
    group_by(country) |>
    summarise(Antall = n(), .groups = "drop")
```

```{r}
eu_data |>
   summary()
```

```{r}
eu_data <- eu_data |>
    select(country, NUTS3 = geo, year = time, gdp, pop)
  # Rydder opp
  # Sletter alle objekt utenom eu_data
  # don't use if you don't mean it
  rm(list = setdiff(ls(), "eu_data"))
```

## Oppgave 13

```{r}
# Beregner GDP per capita
eu_data <- eu_data %>%
  mutate(gdp_per_capita = round(gdp / pop, 2))
```

```{r}
  eu_data |>
    select(gdp_per_capita) |>
    summary()
```

## Oppgave 14

```{r}
# Legger til variabelen country_name basert på verdier i geo
eu_data <- eu_data %>%
  mutate(
    country_name = case_when(
      country == "AT" ~ "Østerrike",
      country == "DE" ~ "Tyskland",
      country == "DK" ~ "Danmark",
      country == "FR" ~ "Frankrike",
      country == "EL" ~ "Hellas",
      country == "ES" ~ "Spania",
      country == "IT" ~ "Italia",
      country == "NL" ~ "Nederland",
      country == "BE" ~ "Belgia",
      country == "IE" ~ "Irland",
      country == "PL" ~ "Polen",
      country == "PT" ~ "Portugal",
      country == "NO" ~ "Norge",
      country == "SE" ~ "Sverige",
      country == "FI" ~ "Finland",
      country == "CH" ~ "Sveits",
      TRUE ~ as.character(country)  # Default: Behold country som country_name hvis ingen betingelser matcher
    )
  )
```

## Oppgave 15

```{r}
# Lager NUTS2, NUTS1, og NUTSc
eu_data <- eu_data %>%
  mutate(
    NUTS2 = str_sub(NUTS3, start = 1, end = 4),
    NUTS1 = str_sub(NUTS3, start = 1, end = 3),
    NUTSc = str_sub(NUTS3, start = 1, end = 2)
  ) %>%
  # Velger ønsket rekkefølge av variabler
  select(country_name, country, year, NUTS3, NUTS2, NUTS1, NUTSc, gdp, pop, gdp_per_capita)
```

## Oppgave 16

```{r}
gini_NUTS2 <- eu_data %>%
  group_by(NUTS2, country_name, country, year) %>%
  summarise(
    gini_nuts2 = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts3 = n(),
    .groups = "drop"
  ) %>%
  select(country_name, country, NUTS2, year, pop, gdp, gdp_per_capita, num_nuts3, gini_nuts2)
```

```{r}
gini_NUTS2 |>
     summary() |>
     print(width = 80)
```

```{r}
gini_NUTS2 |>
    select(-country_name) |>
    filter(gini_nuts2 < 0.001)
```

## Oppgave 17

```{r}
gini_NUTS1 <- eu_data %>%
  group_by(NUTS1, country_name, country, year) %>%
  summarise(
    gini_nuts1 = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts2 = n_distinct(NUTS2),
    .groups = "drop"
  ) %>%
  select(country_name, country, NUTS1, year, pop, gdp, gdp_per_capita, num_nuts2, gini_nuts1)
```

```{r}
gini_NUTS1 |>
  summary() |> 
    print(width = 80)
```

## Oppgave 18

```{r}
gini_NUTSc <- eu_data %>%
  group_by(NUTSc, country_name, country, year) %>%
  summarise(
    gini_nutsc = Gini(
      x = gdp_per_capita,
      weights = pop,
      na.rm = TRUE
    ),
    pop = sum(pop, na.rm = TRUE),
    gdp = sum(gdp, na.rm = TRUE),
    gdp_per_capita = gdp / pop,
    num_nuts1 = n_distinct(NUTS1),
    .groups = "drop"
  ) %>%
  select(country_name, country, NUTSc, year, pop, gdp, gdp_per_capita, num_nuts1, gini_nutsc)
```

```{r}
gini_NUTSc |>
    summary() |>
    print(width = 80)
```

## Oppgave 19

```{r}
gini_NUTS2_nest <- gini_NUTS2 |>
     group_by(country_name, country) |>
     nest(.key = "NUTS2_data") |>
     ungroup()
```

## Oppgave 20

```{r}
gini_NUTS1_nest <- gini_NUTS1 %>%
  group_by(country_name, country) %>%
  nest(.key = "NUTS1_data") %>%
  ungroup()
```

## Oppgave 21

```{r}
gini_NUTSc_nest <- gini_NUTSc %>%
  group_by(country_name, country) %>%
  nest(.key = "NUTSc_data") %>%
  ungroup()
```

## Oppgave 22

```{r}
# Anta at eu_data er ditt opprinnelige datasett

# Grupper etter land og neste dataene på NUTS3-nivå
eu_data_nested <- eu_data %>%
  group_by(country_name, country) %>%
  nest() %>%
  rename(NUTS3_data = data) %>%
  ungroup()

# Sørg for at de andre gini-datasettene har én rad per land
# Du må kanskje utføre en aggregering her hvis det er nødvendig
gini_NUTS2_nest_unique <- gini_NUTS2_nest %>% distinct(country_name, country, .keep_all = TRUE)
gini_NUTS1_nest_unique <- gini_NUTS1_nest %>% distinct(country_name, country, .keep_all = TRUE)
gini_NUTSc_nest_unique <- gini_NUTSc_nest %>% distinct(country_name, country, .keep_all = TRUE)

# Left join med de unike gini-datasettene
eu_data_nested <- eu_data_nested %>%
  left_join(gini_NUTS2_nest_unique, by = c("country_name", "country")) %>%
  left_join(gini_NUTS1_nest_unique, by = c("country_name", "country")) %>%
  left_join(gini_NUTSc_nest_unique, by = c("country_name", "country"))

# Fjerner gruppestrukturen og eventuelle duplikater
eu_data_nested <- eu_data_nested %>%
  ungroup() %>%
  distinct(country_name, country, .keep_all = TRUE)

# Sjekk strukturen til den endelige dataframen
print(eu_data_nested)
```

## Oppgave 23

```{r}
# Konverter year til numerisk format
gini_NUTSc$year <- as.numeric(gini_NUTSc$year)

# Plotting med femårsintervaller på x-aksen
ggplot(gini_NUTSc, aes(x = year, y = gini_nutsc, group = country_name, color = country_name)) +
  geom_line() +
  labs(title = "Utvikling i Gini-koeffisient på nasjonsnivå",
       x = "År",
       y = "Gini-koeffisient") +
  scale_x_continuous(breaks = seq(min(gini_NUTSc$year), max(gini_NUTSc$year), by = 5))
```

```{r}
eu_data_nested |> 
  unnest(NUTSc_data) |> 
  filter(year == 2020) |> 
  select(country_name, gini_nutsc) |> 
  arrange(desc(gini_nutsc)) |> 
  flextable() |> 
  width(1, width = 1.5) |> 
  width(2, width = 1.5)
```

## Oppgave 24

```{r}
eu_data_nested %>%
  unnest(NUTS2_data) %>%
  filter(country == "IE") %>%
  filter(year == 2000:2020) %>%
  select(year, NUTS2, gdp_per_capita, gini_nuts2) %>%
  arrange(desc(gini_nuts2)) %>%
  flextable() %>%
  width(1, width = 1.5) %>%
  width(2, width = 1.5)
```

## Oppgave 25

```{r}
eu_data_nested %>%
  unnest(NUTS2_data) %>%
  filter(country == "ES") %>%
  filter(year == 2000:2020) %>%
  select(year, NUTS2, gdp_per_capita, gini_nuts2) %>%
  arrange(desc(gini_nuts2)) %>%
  flextable() %>%
  width(1, width = 1.5) %>%
  width(2, width = 1.5)
```

```{r}
eu_data_nested %>%
  unnest(NUTS2_data) %>%
  filter(country == "ES") %>%
  ggplot(aes(x = year, y = gini_nuts2, group = NUTS2, color = NUTS2)) +
  geom_line() +
  labs(title = "Utvikling i Gini-koeffisientene for NUTS2-regionene i Spania",
       x = "År",
       y = "Gini-koeffisient")
```

## Oppgave 26

```{r}
eu_data_nested %>%
  unnest(NUTS1_data) %>%
  filter(country == "ES") %>%
  ggplot(aes(x = year, y = gini_nuts1, group = NUTS1, color = NUTS1)) +
  geom_line() +
  labs(title = "Utvikling i Gini-koeffisientene for NUTS2-regionene i Spania",
       x = "År",
       y = "Gini-koeffisient")
```

## Oppgave 27

Basert på figurene over som viser Gini-koeffisientene for de spanske NUTS2-regionene, observerer vi betydelige variasjoner i inntektsulikheten mellom regionene og over tid.
Dette indikerer at fordelingen av økonomisk aktivitet og inntekt i Spania har endret seg gjennom årene.
Noen regioner fremviser en trend mot økende ulikhet, mens andre har mer stabile eller avtagende nivåer av ulikhet.
ES7 Canarias utmerker seg med en sterk nedgang.
De varierende Gini-koeffisientene reflekterer regionsspesifikke økonomiske forhold og er en indikator på at økonomisk vekst og velstand ikke er jevnt fordelt over landet.

## Oppgave 28

```{r}
# Filtrer på Spania (ES) og NUTS2-nivå
eu_data_spain_nuts2 <- eu_data_nested %>%
  unnest(NUTS2_data) %>%
  filter(country == "ES")

# Plotting av gdp_per_capita for de ulike NUTS2-regionene i Spania
ggplot(eu_data_spain_nuts2, aes(x = year, y = gdp_per_capita, group = NUTS2, color = NUTS2)) +
  geom_line() +
  labs(title = "Utvikling i GDP per Capita på NUTS2-nivå i Spania",
       x = "År",
       y = "GDP per Capita")
```

## Oppgave 29

```{r}
# Filtrer på Tyskland (DE) og NUTS2-nivå
eu_data_Germany_nuts2 <- eu_data_nested %>%
  unnest(NUTS2_data) %>%
  filter(country == "DE")

# Plotting av gdp_per_capita for de ulike NUTS2-regionene i Tyskland
ggplot(eu_data_Germany_nuts2, aes(x = year, y = gini_nuts2, group = NUTS2, color = NUTS2)) +
  geom_line() +
  labs(title = "Utvikling i gini_nuts2 i Tyskland",
       x = "År",
       y = "gini_nuts2")
```

## Oppgave 30

```{r}
# Filtrer på Tyskland (DE) og NUTS1-nivå
eu_data_Germany_nuts1 <- eu_data_nested %>%
  unnest(NUTS1_data) %>%
  filter(country == "DE")

# Plotting av gdp_per_capita for de ulike NUTS2-regionene i Tyskland
ggplot(eu_data_Germany_nuts1, aes(x = year, y = gini_nuts1, group = NUTS1, color = NUTS1)) +
  geom_line() +
  labs(title = "Utvikling i gini_nuts1 i Tyskland",
       x = "År",
       y = "gini_nuts1")
```

Det er nesten samme tilfelle når vi ser på de større regioner (NUTS1) i Tyskland, men vi ser at spredningen ikke er like stor.

## Oppgave 31

```{r}
# Filtrer på Frankrike (FR) og NUTS2-nivå
eu_data_Frankrike_nuts2 <- eu_data_nested %>%
  unnest(NUTS2_data) %>%
  filter(country == "FR")

# Plotting av gdp_per_capita for de ulike NUTS2-regionene i Frankrike
ggplot(eu_data_Frankrike_nuts2, aes(x = year, y = gini_nuts2, group = NUTS2, color = NUTS2)) +
  geom_line() +
  labs(title = "Utvikling i gini_nuts2 i Frankrike",
       x = "År",
       y = "gini_nuts2")
```

```{r}
eu_data_nested |>
     unnest(NUTS2_data) |>
     filter(country_name == "Frankrike") |>
     filter(year == 2020) |>
     select(NUTS2, gini_nuts2) |>
     arrange(desc(gini_nuts2)) |>
     flextable()  |>
     width(1, width = 1.5) |>
     width(2, width = 1.5)

```

## Oppgave 32

```{r}
# Filtrer på Frankrike (FR) og NUTS2-nivå
eu_data_Frankrike_nuts1 <- eu_data_nested %>%
  unnest(NUTS1_data) %>%
  filter(country == "FR")

# Plotting av gininuts1 for de ulike NUTS1-regionene i Frankrike
ggplot(eu_data_Frankrike_nuts1, aes(x = year, y = gini_nuts1, group = NUTS1, color = NUTS1)) +
  geom_line() +
  labs(title = "Utvikling i gini_nuts2 i Frankrike",
       x = "År",
       y = "gini_nuts1")
```

## Oppgave 33

Regionen FR1 er Ile-de-France og inkluderer Paris, og er mye høyere pga.
det er mye økonomisk aktivitet i denne regionen.

## Oppgave 34

```{r}
eu_data_nested |> 
  filter(country == "FR") |> 
  unnest(NUTS3_data) |> 
  filter(NUTS1 == "FR1") |> 
  ggplot(
    aes(
      x = year,
      y = gdp_per_capita,
      group = NUTS3,
      color = NUTS3,
    )
  ) +
  geom_line()
```

## Oppgave 35

Regionen FR1 er Ile-de-France og inkluderer Paris, og er mye høyere pga.
det er mye økonomisk aktivitet i denne regionen.

## Oppgave 36

```{r}
NUTS2_diff <- eu_data_nested |> 
  unnest(NUTS2_data) |> 
  mutate(
    # Når vi tar diff får vi en obs. mindre. Legger derfor inn en NA først
    # i vektoren
    diff_gdp_per_capita = c(NA, diff(gdp_per_capita)),
    diff_gini_nuts2 = c(NA, diff(gini_nuts2))
    ) |> 
  select(country_name, country, NUTS2, year, diff_gdp_per_capita, diff_gini_nuts2) %>% 
  # Fjerner obs. der vi har NA
  filter(complete.cases(.)) |> 
  group_by(country_name, country, NUTS2) |> 
  nest(.key = "NUTS2_diff")
```

## Oppgave 37

```{r}
NUTS2_diff <- NUTS2_diff %>%
  mutate(
    modell = map(NUTS2_diff, ~ lm(diff_gini_nuts2 ~ diff_gdp_per_capita, data = .))
  )

```

## Oppgave 38

```{r}
NUTS2_diff <- NUTS2_diff  |> 
  group_by(country_name, country, NUTS2) |> 
  mutate(
    mod_coeff = map_df(
      .x = modell,
      .f = coef
      )
    )
```

## Oppgave 39

```{r}
NUTS2_diff <- NUTS2_diff  |> 
  group_by(country_name, country, NUTS2) |> 
  mutate(
    mod_sum = map_df(
      .x = modell,
      .f = glance
      )
    )
```

## Oppgave 40

```{r}
NUTS2_diff$mod_coeff |> 
  ggplot() +
  geom_density(mapping = aes(x = diff_gdp_per_capita), adjust = 0.6) +
  geom_vline(mapping = aes(xintercept = mean(diff_gdp_per_capita, na.rm = TRUE)), 
                           colour = "gray60",
                           linetype = "dashed")
```

## Oppgave 41

```{r}
# Antall positive regresjonskoeffisienter
antall_positive_koef <- sum(NUTS2_diff$modell %>% map_dbl(~ coef(.)["diff_gdp_per_capita"] > 0))

cat("Antall positive regresjonskoeffisienter for diff_gdp_per_capita:", antall_positive_koef, "\n")
```

## Oppgave 42

```{r}
# Gjennomsnitt av regresjonskoeffisientene for diff_gdp_per_capita
gjennomsnitt_koef <- mean(NUTS2_diff$modell %>% map_dbl(~ coef(.)["diff_gdp_per_capita"]))

cat("Gjennomsnitt av regresjonskoeffisientene for diff_gdp_per_capita:", gjennomsnitt_koef, "\n")
```

## Oppgave 43

```{r}
t.test(NUTS2_diff$mod_coeff$diff_gdp_per_capita, y = NULL,
       alternative = c("greater"),
       mu = 0, paired = FALSE, var.equal = FALSE,
       conf.level = 0.95)
```

Ettersom p-verdien (0,004755) er mindre enn det vanlige signifikansnivået på 0.05, har vi tilstrekkelig bevis til å avvise nullhypotesen om at gjennomsnittet av diff_gdp_per_capita er lik null.
Derfor kan vi konkludere med at endringene i gdp_per_capita er signifikant større enn null.

## Oppgave 44

```{r}
# Lager et nytt datasett som inneholder de nødvendige variablene vi trenger.
new_dataset <- eu_data_nested %>%
  unnest(NUTS2_data) %>%
  mutate(
    diff_gdp_per_capita = c(NA, diff(gdp_per_capita)),
    diff_gini_nuts2 = c(NA, diff(gini_nuts2))
  ) %>%
  select(country_name, country, NUTS2, year, diff_gdp_per_capita, diff_gini_nuts2) %>%
  filter(!is.na(diff_gdp_per_capita))  # Fjern rader med NA-verdier

# Panel
p_mod <- plm(diff_gini_nuts2 ~ diff_gdp_per_capita, data = new_dataset, index = c("NUTS2", "year"), model = "pooling")
```

## Oppgave 45

```{r}
summary(p_mod)
```

Panelet over viser sammenhengen mellom endringer i BNP per innbygger (**`diff_gdp_per_capita`**) og endringer i Gini-koeffisienten på NUTS2-nivå (**`diff_gini_nuts2`**).
Resultatene indikerer at økonomisk vekst, representert ved **`diff_gdp_per_capita`**, har en signifikant positiv sammenheng med endringer i Gini-koeffisienten.
Koeffisienten for **`diff_gdp_per_capita`** er tilnærmet lik null ( 3.1165e-06), og p-verdien er svært lav, noe som tyder på at økt økonomisk aktivitet er assosiert med økninger i inntektsulikheter på NUTS2-nivå.
Modellen forklarer 14.17% av variansen i Gini-koeffisienten.

## Oppgave 46

```{r}
summary(p_mod, vcov = function(x) vcovHC(x, method = "white2"))
```

I den alternative måten å generere summary() for p_mod blir det brukt heteroskedastisitetskonsistent (HC) standardfeil beregnet ved White's metode (method = "white2").
Dette gjøres ved å inkludere vcovHC(x, method = "white2") som et argument i summary()-funksjonen.
White's HC-estimator justerer for mulig heteroskedastisitet i feilleddene og gir mer robuste standardfeil, spesielt i tilfeller der det er mistanke om at feilleddene ikke har konstant varians.

Sammenlignet med den ordinære summary () gir den alternative metoden litt forskjellige standardfeil og justerte p-verdier.
Dette skyldes bruken av robuste standardfeil i den alternative tilnærmingen.
Koeffisienten for diff_gdp_per_capita forblir signifikant, og hovedfunnene i analysen er i stor grad ganske lik.
Den robuste tilnærmingen gir mer pålitelige standardfeil når det er bekymringer for heteroskedastisitet.
